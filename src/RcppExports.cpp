// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gradient_m_cpp
Rcpp::NumericVector gradient_m_cpp(const arma::cube& X, const arma::cube& Yhat, const arma::mat& wt, const double& lambda, const arma::vec& vm, const arma::vec& vs, const arma::vec& vt, const bool& normalize);
RcppExport SEXP _microTensor_gradient_m_cpp(SEXP XSEXP, SEXP YhatSEXP, SEXP wtSEXP, SEXP lambdaSEXP, SEXP vmSEXP, SEXP vsSEXP, SEXP vtSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Yhat(YhatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vm(vmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vt(vtSEXP);
    Rcpp::traits::input_parameter< const bool& >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_m_cpp(X, Yhat, wt, lambda, vm, vs, vt, normalize));
    return rcpp_result_gen;
END_RCPP
}
// gradient_s_cpp
Rcpp::NumericVector gradient_s_cpp(const arma::cube& X, const arma::cube& Yhat, const arma::mat& wt, const double& lambda, const arma::vec& vm, const arma::vec& vs, const arma::vec& vt, const bool& normalize);
RcppExport SEXP _microTensor_gradient_s_cpp(SEXP XSEXP, SEXP YhatSEXP, SEXP wtSEXP, SEXP lambdaSEXP, SEXP vmSEXP, SEXP vsSEXP, SEXP vtSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Yhat(YhatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vm(vmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vt(vtSEXP);
    Rcpp::traits::input_parameter< const bool& >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_s_cpp(X, Yhat, wt, lambda, vm, vs, vt, normalize));
    return rcpp_result_gen;
END_RCPP
}
// gradient_t_cpp
Rcpp::NumericVector gradient_t_cpp(const arma::cube& X, const arma::cube& Yhat, const arma::mat& wt, const double& lambda, const arma::vec& vm, const arma::vec& vs, const arma::vec& vt, const bool& normalize);
RcppExport SEXP _microTensor_gradient_t_cpp(SEXP XSEXP, SEXP YhatSEXP, SEXP wtSEXP, SEXP lambdaSEXP, SEXP vmSEXP, SEXP vsSEXP, SEXP vtSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Yhat(YhatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vm(vmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vt(vtSEXP);
    Rcpp::traits::input_parameter< const bool& >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_t_cpp(X, Yhat, wt, lambda, vm, vs, vt, normalize));
    return rcpp_result_gen;
END_RCPP
}
// gradient_lambda_cpp
double gradient_lambda_cpp(const arma::cube& X, const arma::cube& Yhat, const arma::mat& wt, const double& lambda, const arma::vec& vm, const arma::vec& vs, const arma::vec& vt, const bool& normalize);
RcppExport SEXP _microTensor_gradient_lambda_cpp(SEXP XSEXP, SEXP YhatSEXP, SEXP wtSEXP, SEXP lambdaSEXP, SEXP vmSEXP, SEXP vsSEXP, SEXP vtSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Yhat(YhatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vm(vmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vt(vtSEXP);
    Rcpp::traits::input_parameter< const bool& >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_lambda_cpp(X, Yhat, wt, lambda, vm, vs, vt, normalize));
    return rcpp_result_gen;
END_RCPP
}
// negLogLik_cpp
double negLogLik_cpp(const arma::cube& X, const arma::cube& Yhat, const arma::mat& wt, const double& lambda, const arma::vec& vm, const arma::vec& vs, const arma::vec& vt, const bool& normalize);
RcppExport SEXP _microTensor_negLogLik_cpp(SEXP XSEXP, SEXP YhatSEXP, SEXP wtSEXP, SEXP lambdaSEXP, SEXP vmSEXP, SEXP vsSEXP, SEXP vtSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Yhat(YhatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vm(vmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vt(vtSEXP);
    Rcpp::traits::input_parameter< const bool& >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(negLogLik_cpp(X, Yhat, wt, lambda, vm, vs, vt, normalize));
    return rcpp_result_gen;
END_RCPP
}
// solve_x_vm
Rcpp::List solve_x_vm(const double& L_old, const double& gamma, const arma::vec& gradient, const arma::cube& X, const arma::cube& Yhat, const arma::mat& wt, const double& lambda, const arma::vec& vm, const arma::vec& vs, const arma::vec& vt, const unsigned int& max_iter);
RcppExport SEXP _microTensor_solve_x_vm(SEXP L_oldSEXP, SEXP gammaSEXP, SEXP gradientSEXP, SEXP XSEXP, SEXP YhatSEXP, SEXP wtSEXP, SEXP lambdaSEXP, SEXP vmSEXP, SEXP vsSEXP, SEXP vtSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type L_old(L_oldSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gradient(gradientSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Yhat(YhatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vm(vmSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vt(vtSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_x_vm(L_old, gamma, gradient, X, Yhat, wt, lambda, vm, vs, vt, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// test_cpp
Rcpp::List test_cpp(const arma::cube& X);
RcppExport SEXP _microTensor_test_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(test_cpp(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_microTensor_gradient_m_cpp", (DL_FUNC) &_microTensor_gradient_m_cpp, 8},
    {"_microTensor_gradient_s_cpp", (DL_FUNC) &_microTensor_gradient_s_cpp, 8},
    {"_microTensor_gradient_t_cpp", (DL_FUNC) &_microTensor_gradient_t_cpp, 8},
    {"_microTensor_gradient_lambda_cpp", (DL_FUNC) &_microTensor_gradient_lambda_cpp, 8},
    {"_microTensor_negLogLik_cpp", (DL_FUNC) &_microTensor_negLogLik_cpp, 8},
    {"_microTensor_solve_x_vm", (DL_FUNC) &_microTensor_solve_x_vm, 11},
    {"_microTensor_test_cpp", (DL_FUNC) &_microTensor_test_cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_microTensor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
